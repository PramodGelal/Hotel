package javaapplication8;



import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;

import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;


/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author ACER
 */
public class book2 extends javax.swing.JFrame {

    /**
     * Creates new form book2
     */
    public book2() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        room = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        person = new javax.swing.JTextField();
        back = new javax.swing.JButton();
        book = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        email = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        amount = new javax.swing.JButton();
        noroom = new javax.swing.JComboBox<>();
        price = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 204, 0));
        jPanel1.setBorder(javax.swing.BorderFactory.createMatteBorder(15, 15, 15, 15, new java.awt.Color(0, 0, 0)));

        jLabel1.setText("BOOKING");

        jLabel2.setText("Types of room");

        room.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Single","Double","Deluxe" ,"Family"  }));
        room.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomActionPerformed(evt);
            }
        });

        jLabel3.setText("No. of room");

        jLabel4.setText("No. of person");

        person.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        person.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                personActionPerformed(evt);
            }
        });

        back.setBackground(new java.awt.Color(204, 0, 0));
        back.setText("<-Back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        book.setBackground(new java.awt.Color(204, 0, 51));
        book.setText("Book");
        book.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookActionPerformed(evt);
            }
        });

        jLabel5.setText("Customer Name");

        name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameActionPerformed(evt);
            }
        });

        jLabel6.setText("Email");

        email.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailActionPerformed(evt);
            }
        });

        jLabel7.setText("Amount ");

        amount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                amountActionPerformed(evt);
            }
        });

        noroom.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        noroom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noroomActionPerformed(evt);
            }
        });

        price.setFont(new java.awt.Font("Segoe UI Black", 0, 8)); // NOI18N
        price.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceActionPerformed(evt);
            }
        });

        jLabel8.setText("Price");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(noroom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(97, 97, 97)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(room, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(person, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(amount, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(176, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(price, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(87, 87, 87))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(back)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(book)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(room, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(noroom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(person, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(amount, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(back)
                            .addComponent(book))
                        .addContainerGap())))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void roomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomActionPerformed
        // TODO add your handling code here:
        
        String s=(String)room.getSelectedItem();
        
        switch (s){
case "Single" -> {
    price.setText("Price of one room is 3000 and max capicity is 1 and you can have one person extra with additional charge of 450");
}

        case "Double" -> {
        
    price.setText("Price of one room is 3500 and max capicity is 2 and you can have one person extra with additional charge of 450");
        }
        case "Deluxe" -> {
        
        
    price.setText("Price of one room is 4500 and max capicity is 3 and you can have one person extra with additional charge of 450");
        }
        
case "Family" -> {
    price.setText("Price of one room is 5500 and max capicity is 5 and you can have one person extra with additional charge of 450");

}
default ->{

    price.setText("select roomtype");
}
        
        }
    }//GEN-LAST:event_roomActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        back.addMouseListener(new MouseListener(){

@Override
public void mousePressed(MouseEvent e){}
@Override
public void mouseClicked(MouseEvent e){
    book2.this.setVisible(false);
home1 h=new home1();
h.show();


}
@Override
public void mouseReleased(MouseEvent e){}
@Override
public void mouseEntered(MouseEvent e){}
@Override
public void mouseExited(MouseEvent e){}




});
    }//GEN-LAST:event_backActionPerformed

    private void nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameActionPerformed
        // TODO add your handling code here:
                name.addKeyListener(new KeyListener(){
            @Override
            public void keyTyped(KeyEvent e) {
            }

            @Override
            public void keyPressed(KeyEvent e) {
                                                          
    if(e.getKeyCode()==KeyEvent.VK_ENTER){
               
               email.requestFocus();        // TODO add your handling code here:
        
    }
        
        
    }      
            

            @Override
            public void keyReleased(KeyEvent e) {
            }
        });   
    }//GEN-LAST:event_nameActionPerformed

    private void emailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailActionPerformed
        // TODO add your handling code here:
                email.addKeyListener(new KeyListener(){
            @Override
            public void keyTyped(KeyEvent e) {
            }

            @Override
            public void keyPressed(KeyEvent e) {
                                                          
    if(e.getKeyCode()==KeyEvent.VK_ENTER){
               
               book.requestFocus();        // TODO add your handling code here:
        
    }
        
        
    }      
            

            @Override
            public void keyReleased(KeyEvent e) {
            }
        });   
    }//GEN-LAST:event_emailActionPerformed

    private void noroomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noroomActionPerformed

String  n=(String)noroom.getSelectedItem();
int t=Integer.parseInt(n);
int to;
//String ns=String.valueOf(to);
//amount.setText(ns);
//person.setText("");

    
            
        String s=(String)room.getSelectedItem();
        
        switch (s){
case "Single" -> {
    to=t*3000;
    String cost=String.valueOf(to);
    amount.setText(cost);
    person.setText("");
    
}

        case "Double" -> {
          to=t*3500;
    String cost=String.valueOf(to);
    amount.setText(cost);
    person.setText("");
       }
        case "Deluxe" -> {
        
  to=t*4500;
    String cost=String.valueOf(to);
    amount.setText(cost);  
        person.setText("");
        }
        
case "Family" -> {
  to=t*5500;
    String cost=String.valueOf(to);
    amount.setText(cost);
    person.setText("");
}
default ->{

}
        
        }
    

    }//GEN-LAST:event_noroomActionPerformed

    private void personActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_personActionPerformed
        // TODO add your handling code here:
        String  no_of_room_in_string=(String)noroom.getSelectedItem();
int no_of_room_in_int=Integer.parseInt(no_of_room_in_string);
//int total_price_of_room=no_of_room_in_int*1500;
String numberofperson=(String)person.getText();
int numberofperson1=Integer.parseInt(numberofperson);
String p=(String) room.getSelectedItem();
switch (p){
case "Single" -> {
    if((numberofperson1==no_of_room_in_int)||(no_of_room_in_int>numberofperson1)){
        int total_price_of_room=no_of_room_in_int*3000;
        String ns=String.valueOf(total_price_of_room);
        amount.setText(ns);
        
    }

    else if((numberofperson1)<=(no_of_room_in_int+(no_of_room_in_int))){
        int total_price_of_room=no_of_room_in_int*3000;
        int totalpreson_and_room=total_price_of_room+(((numberofperson1-no_of_room_in_int))*450);
        String ns=String.valueOf(totalpreson_and_room);
        amount.setText(ns);
        
    }
    else{
        
        person.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(204, 0, 0)));
       
                        amount.setText("");

        
    }           }

case "Double" -> {
    if((numberofperson1<=2*no_of_room_in_int)){
        int total_price_of_room=no_of_room_in_int*3500;
        String ns=String.valueOf(total_price_of_room);
        amount.setText(ns);
        
    }

else if(numberofperson1<=(2*no_of_room_in_int+no_of_room_in_int)){
int total_price_of_room=no_of_room_in_int*3500;
        int totalpreson_and_room=total_price_of_room+(((numberofperson1-2*no_of_room_in_int))*450);
        String ns=String.valueOf(totalpreson_and_room);
        amount.setText(ns);
        
    }
    else{
        
        person.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(204, 0, 0)));
        person.setText("invalid number of people ");
                        amount.setText("");

        
    }           }

case "Deluxe" -> {
       if((numberofperson1<=3*no_of_room_in_int)){
        int total_price_of_room=no_of_room_in_int*4500;
        String ns=String.valueOf(total_price_of_room);
        amount.setText(ns);
        
    }

else if(numberofperson1<=(3*no_of_room_in_int+no_of_room_in_int)){
int total_price_of_room=no_of_room_in_int*4500;
        int totalpreson_and_room=total_price_of_room+(((numberofperson1-3*no_of_room_in_int))*450);
        String ns=String.valueOf(totalpreson_and_room);
        amount.setText(ns);
        
    }
    else{
        
        person.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(204, 0, 0)));
        person.setText("invalid number of people ");
                        amount.setText("");

        
    }           }
case "Family" -> {
    if((numberofperson1<=5*no_of_room_in_int)){
        int total_price_of_room=no_of_room_in_int*5500;
        String ns=String.valueOf(total_price_of_room);
        amount.setText(ns);
        
    }

else if(numberofperson1<=(5*no_of_room_in_int+no_of_room_in_int)){
int total_price_of_room=no_of_room_in_int*5500;
        int totalpreson_and_room=total_price_of_room+(((numberofperson1-5*no_of_room_in_int))*450);
        String ns=String.valueOf(totalpreson_and_room);
        amount.setText(ns);
        
    }
    else{
        
        person.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(204, 0, 0)));
        person.setText("invalid number of people ");
                        amount.setText("");

        
    }           }
default ->{
System.out.print("hello");


}
   

}
        person.addKeyListener(new KeyListener(){
            @Override
            public void keyTyped(KeyEvent e) {
            }

            @Override
            public void keyPressed(KeyEvent e) {
                                                          
    if(e.getKeyCode()==KeyEvent.VK_ENTER){
               
               name.requestFocus();        // TODO add your handling code here:
        
    }
        
        
    }      
            

            @Override
            public void keyReleased(KeyEvent e) {
            }
        });   


        
        
    }//GEN-LAST:event_personActionPerformed

   /* int isNotNullOrEmpty(String s){
  String  pt="";
        int re = 0;
        if(s.equals(pt)){
    re=1;
    
    }
        return re;
    
    }*/
    
    
    private void bookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookActionPerformed
       String nameb=name.getText();
       String emailb=email.getText();
       String personb=person.getText();
       String number_of_roomb=(String) noroom.getSelectedItem();
       String roomb=(String) room.getSelectedItem();
       String amountb=amount.getText();
       
      if ((isNotNullOrEmpty(nameb) )&& (isNotNullOrEmpty(emailb)) && (isNotNullOrEmpty(personb))&& (isNotNullOrEmpty(number_of_roomb))&& (isNotNullOrEmpty(roomb))) {
     System.out.print("vayo");
 PreparedStatement preparedStatement3;
    Connection c;
    String jdbcUrl = "jdbc:mysql://localhost:3306/spshotel";
 String username = "root";
        String password1 = "password";
      
           try {
               Class.forName("com.mysql.cj.jdbc.Driver");
         
 c=DriverManager.getConnection(jdbcUrl,username,password1);
String sql="insert into booking(type_of_room ,no_of_room ,no_of_person ,name ,email,amount  )values (?,?,?,?,?,?)";
preparedStatement3 =c.prepareStatement(sql);
preparedStatement3.setString(1,roomb);
preparedStatement3.setString(2,number_of_roomb);
preparedStatement3.setString(3,personb);
preparedStatement3.setString(4,nameb);
preparedStatement3.setString(5,emailb);
preparedStatement3.setString(6,amountb);

int rs;
        rs= preparedStatement3.executeUpdate();
        book2.this.setVisible(false);
home1 h=new home1();
h.show();

      preparedStatement3.close();
      c.close();
      }catch (ClassNotFoundException | SQLException ex) {
               Logger.getLogger(book2.class.getName()).log(Level.SEVERE, null, ex);
           }
           // TODO add your handling code here:
           
      }
        // TODO add your handling code here:
    }//GEN-LAST:event_bookActionPerformed

    private void priceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_priceActionPerformed

    private void amountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_amountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_amountActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(book2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(book2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(book2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(book2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new book2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton amount;
    private javax.swing.JButton back;
    private javax.swing.JButton book;
    private javax.swing.JTextField email;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField name;
    private javax.swing.JComboBox<String> noroom;
    private javax.swing.JTextField person;
    private javax.swing.JButton price;
    private javax.swing.JComboBox<String> room;
    // End of variables declaration//GEN-END:variables

private boolean isNotNullOrEmpty(String str) {
    return str != null && !str.trim().isEmpty();
}
}
